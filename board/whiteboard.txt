project_root/
├── notebooks/
│   ├── bronze_full_ingestion.py
│   └── silver_transformation.py
├── utils/
│   ├── __init__.py
│   ├── common_utils.py
│   ├── file_tagger.py
│   └── git_utils.py
├── configs/
│   └── bronze_config.json
└── README.md

# utils/__init__.py
from .common_utils import read_file_content, write_file_content, read_json_config
from .file_tagger import tag_file, save_tagged_file
from .git_utils import clone_repo, get_repo_info, checkout_branch

# utils/common_utils.py
import os
import sys
import json
from pathlib import Path

# Get project root and add to path only if needed
current_dir = Path(os.path.dirname(os.path.abspath(__file__)))
project_root = current_dir.parent

if str(project_root) not in sys.path:
    sys.path.insert(0, str(project_root))

def read_file_content(file_path):
    """Read content from a file."""
    with open(file_path, 'r') as f:
        return f.read()

def write_file_content(file_path, content):
    """Write content to a file."""
    with open(file_path, 'w') as f:
        f.write(content)

def read_json_config(config_name):
    """Read JSON config file from configs directory."""
    try:
        config_path = project_root / "configs" / config_name
        with open(config_path, 'r') as f:
            return json.load(f)
    except Exception as e:
        print(f"Error reading config {config_name}: {e}")
        return {}

if __name__ == "__main__":
    print("Testing common_utils.py")
    try:
        # Test file operations
        test_file = "/dbfs/tmp/test.txt"
        test_content = "Test content"
        write_file_content(test_file, test_content)
        read_content = read_file_content(test_file)
        print(f"File operations test: {test_content == read_content}")
        
        # Test config reading
        config = read_json_config("bronze_config.json")
        print(f"Config test: {bool(config)}")
    except Exception as e:
        print(f"Error during testing: {e}")

# utils/file_tagger.py
import os
import sys
from pathlib import Path

# Get project root and add to path only if needed
current_dir = Path(os.path.dirname(os.path.abspath(__file__)))
project_root = current_dir.parent

if str(project_root) not in sys.path:
    sys.path.insert(0, str(project_root))

from utils import common_utils

def tag_file(file_path, tag):
    """Tag a file with metadata."""
    content = common_utils.read_file_content(file_path)
    return f"{tag}: {content}"

def save_tagged_file(file_path, tag, output_path):
    """Tag and save file."""
    tagged_content = tag_file(file_path, tag)
    common_utils.write_file_content(output_path, tagged_content)

if __name__ == "__main__":
    print("Testing file_tagger.py")
    try:
        test_file = "/dbfs/tmp/test_input.txt"
        test_output = "/dbfs/tmp/test_output.txt"
        
        # Test tagging
        common_utils.write_file_content(test_file, "Test content")
        tagged = tag_file(test_file, "TEST")
        print(f"Tagged content: {tagged}")
        
        # Test saving
        save_tagged_file(test_file, "TEST", test_output)
        print(f"Saved tagged file to: {test_output}")
    except Exception as e:
        print(f"Error during testing: {e}")

# utils/git_utils.py
import os
import sys
import subprocess
from pathlib import Path

# Get project root and add to path only if needed
current_dir = Path(os.path.dirname(os.path.abspath(__file__)))
project_root = current_dir.parent

if str(project_root) not in sys.path:
    sys.path.insert(0, str(project_root))

def clone_repo(repo_url, target_path):
    """Clone a git repository."""
    try:
        subprocess.run(
            ["git", "clone", repo_url, target_path],
            check=True,
            capture_output=True,
            text=True
        )
        return True
    except subprocess.CalledProcessError as e:
        print(f"Error cloning repository: {e.stderr}")
        return False

def get_repo_info(repo_path):
    """Get git repository information."""
    try:
        result = subprocess.run(
            ["git", "-C", repo_path, "status"],
            capture_output=True,
            text=True,
            check=True
        )
        return result.stdout
    except subprocess.CalledProcessError as e:
        return f"Error: {e.stderr}"

def checkout_branch(repo_path, branch_name, create=False):
    """Checkout or create a git branch."""
    try:
        cmd = ["git", "-C", repo_path, "checkout"]
        if create:
            cmd.append("-b")
        cmd.append(branch_name)
        
        subprocess.run(cmd, check=True, capture_output=True, text=True)
        return True
    except subprocess.CalledProcessError as e:
        print(f"Error checking out branch: {e.stderr}")
        return False

if __name__ == "__main__":
    print("Testing git_utils.py")
    try:
        # Test git info
        repo_info = get_repo_info(str(project_root))
        print(f"Repository information:\n{repo_info}")
    except Exception as e:
        print(f"Error during testing: {e}")

# configs/bronze_config.json
{
    "database_name": "bronze_db",
    "table_name": "bronze_table",
    "source_path": "/mnt/data/raw",
    "target_path": "/mnt/data/bronze",
    "file_format": "delta",
    "write_mode": "overwrite",
    "partition_by": ["date"],
    "options": {
        "mergeSchema": "true",
        "inferSchema": "true"
    }
}

# notebooks/bronze_full_ingestion.py
import os
import sys
from pathlib import Path

# Get project root and add to path only if needed
notebook_path = Path(os.path.dirname(os.path.abspath(__file__)))
project_root = notebook_path.parent

if str(project_root) not in sys.path:
    sys.path.insert(0, str(project_root))

# Import utilities
from utils import common_utils, file_tagger, git_utils

# Read configuration
config = common_utils.read_json_config("bronze_config.json")

# Print configuration
print("Configuration loaded:")
print(f"Database: {config.get('database_name')}")
print(f"Table: {config.get('table_name')}")
print(f"Source Path: {config.get('source_path')}")

# Test file operations
test_file = "/dbfs/tmp/bronze_test.txt"
test_content = "Test from bronze ingestion"
common_utils.write_file_content(test_file, test_content)

# Test file tagging
tagged_content = file_tagger.tag_file(test_file, "BRONZE")
print(f"Tagged content: {tagged_content}")

# Test git operations
repo_info = git_utils.get_repo_info(str(project_root))
print(f"Git repository status:\n{repo_info}")

# notebooks/silver_transformation.py
import os
import sys
from pathlib import Path

# Get project root and add to path only if needed
notebook_path = Path(os.path.dirname(os.path.abspath(__file__)))
project_root = notebook_path.parent

if str(project_root) not in sys.path:
    sys.path.insert(0, str(project_root))

# Import utilities
from utils import common_utils, file_tagger

# Read bronze config for source path
bronze_config = common_utils.read_json_config("bronze_config.json")
source_path = bronze_config.get("target_path")  # Bronze output is Silver input

print(f"Processing data from: {source_path}")

# Your silver transformation code here...
Last edited just now
