import os
from typing import List, Optional

def list_files(directory: str, file_types: Optional[List[str]] = None) -> List[str]:
    """
    Get a list of all files in the given directory and its subdirectories.
    
    Args:
        directory (str): The root directory path to start searching from
        file_types (Optional[List[str]]): List of file extensions to filter by.
            Extensions can be provided with or without the leading dot (e.g., ['.txt', 'py'])
            If None, all files will be included.
    
    Returns:
        List[str]: A list of full file paths
        
    Raises:
        FileNotFoundError: If the directory doesn't exist
        ValueError: If the file_types argument is invalid or not a list
        TypeError: If file_types is provided but not as a list
    """
    # Input validation
    if not os.path.exists(directory):
        raise FileNotFoundError(f"Directory not found: {directory}")
    
    # Type validation for file_types
    if file_types is not None:
        if not isinstance(file_types, list):
            raise TypeError(
                "file_types must be a list of strings. "
                f"Got {type(file_types).__name__} instead."
            )
        
        # Normalize extensions: remove leading dots if present and convert to lowercase
        file_types = [
            ft.lower().lstrip('.') for ft in file_types
        ]
        
        # Validate that we have non-empty strings
        invalid_types = [ft for ft in file_types if not isinstance(ft, str) or not ft]
        if invalid_types:
            raise ValueError(
                f"All file types must be non-empty strings. Invalid values: {invalid_types}"
            )
    
    file_list = []
    
    # Walk through directory
    for root, _, files in os.walk(directory):
        for file in files:
            full_path = os.path.join(root, file)
            
            # Apply file type filter if specified
            if file_types is not None:
                # Get extension without dot and convert to lowercase
                file_ext = os.path.splitext(file)[1].lower().lstrip('.')
                if file_ext in file_types:
                    file_list.append(full_path)
            else:
                file_list.append(full_path)
    
    return sorted(file_list)

# Usage examples:
if __name__ == "__main__":
    # Example 1: List all files
    all_files = list_files("./my_directory")
    print("All files:", all_files)
    
    # Example 2: List only Python files
    python_files = list_files("./my_directory", [".py"])
    print("\nPython files:", python_files)
    
    # Example 3: List only Python files (without dot)
    python_files_2 = list_files("./my_directory", ["py"])
    print("\nPython files (alternative):", python_files_2)
    
    # Example 4: List multiple file types (mixed format)
    code_files = list_files("./my_directory", [".py", "js", ".cpp", "txt"])
    print("\nCode files:", code_files)
    
    # Example 5: Error handling for non-list input
    try:
        files = list_files("./my_directory", ".py")  # Wrong: string instead of list
    except TypeError as e:
        print(f"\nError: {e}")
    
    # Example 6: Error handling for invalid list items
    try:
        files = list_files("./my_directory", ["py", "", None, 123])  # Invalid items
    except ValueError as e:
        print(f"\nError: {e}")
    
    # Example 7: Error handling for invalid directory
    try:
        files = list_files("./nonexistent_directory", [".txt"])
    except FileNotFoundError as e:
        print(f"\nError: {e}")
