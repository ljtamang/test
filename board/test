from azure.storage.blob import BlobServiceClient
from typing import List, Dict, Any
import os
from concurrent.futures import ThreadPoolExecutor, as_completed

def upload_single_file(
    file_path: str,
    container_client: Any,
    base_path_to_ignore: str,
    destination_folder: str = None
) -> Dict[str, Any]:
    """Upload a single file to Azure Blob Storage."""
    try:
        file_path = os.path.normpath(file_path)
        if not os.path.exists(file_path):
            return {
                "file_name": os.path.basename(file_path),
                "status": "failed",
                "error": "File not found"
            }
        
        if not file_path.startswith(base_path_to_ignore):
            return {
                "file_name": os.path.basename(file_path),
                "status": "failed",
                "error": "File path does not start with base path"
            }
        
        relative_path = file_path[len(base_path_to_ignore):].lstrip('/')
        blob_path = f"{destination_folder.strip('/')}/{relative_path}" if destination_folder else relative_path
        blob_path = blob_path.replace('\\', '/')
        
        file_size = os.path.getsize(file_path)
        blob_client = container_client.get_blob_client(blob_path)
        
        with open(file_path, "rb") as data:
            blob_client.upload_blob(data, overwrite=True)
        
        return {
            "file_name": os.path.basename(file_path),
            "blob_path": blob_path,
            "status": "success",
            "url": blob_client.url,
            "size": file_size
        }
        
    except Exception as e:
        return {
            "file_name": os.path.basename(file_path),
            "status": "failed",
            "error": str(e)
        }

def upload_files_to_azure_container(
    file_paths: List[str],
    connection_string: str,
    container_name: str,
    base_path_to_ignore: str,
    destination_folder: str = None,
    max_workers: int = 4
) -> List[Dict[str, Any]]:
    """Upload multiple files to Azure Blob Storage container in parallel."""
    try:
        blob_service_client = BlobServiceClient.from_connection_string(connection_string)
        container_client = blob_service_client.get_container_client(container_name)
        
        if not container_client.exists():
            container_client.create_container()
        
        results = []
        with ThreadPoolExecutor(max_workers=max_workers) as executor:
            future_to_file = {
                executor.submit(
                    upload_single_file,
                    file_path,
                    container_client,
                    base_path_to_ignore,
                    destination_folder
                ): file_path for file_path in file_paths
            }
            
            for future in as_completed(future_to_file):
                results.append(future.result())
        
        return results
        
    except Exception as e:
        # Only fail completely if we can't even start the upload process
        return [{
            "file_name": "batch_operation",
            "status": "failed",
            "error": f"Failed to initialize upload: {str(e)}"
        }]

# Example usage
if __name__ == "__main__":
    config = {
        "connection_string": "your_connection_string",
        "container_name": "docs-container",
        "base_path_to_ignore": "/tmp/va.gov-team"
    }
    
    files_to_upload = [
        "/tmp/va.gov-team/products/avs/finding.md",
        "/tmp/va.gov-team/products/avs/design/mockups.pdf"
    ]
    
    results = upload_files_to_azure_container(
        file_paths=files_to_upload,
        connection_string=config["connection_string"],
        container_name=config["container_name"],
        base_path_to_ignore=config["base_path_to_ignore"],
        destination_folder="documentation"
    )
    
    # Print summary of results
    success_count = sum(1 for r in results if r['status'] == 'success')
    failed_count = sum(1 for r in results if r['status'] == 'failed')
    
    print(f"\nUpload Summary:")
    print(f"Successful: {success_count}")
    print(f"Failed: {failed_count}")
    
    # Print details of failed uploads
    if failed_count > 0:
        print("\nFailed Uploads:")
        for result in results:
            if result['status'] == 'failed':
                print(f"- {result['file_name']}: {result['error']}")
