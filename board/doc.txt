-- Create database if it doesn't exist
CREATE DATABASE IF NOT EXISTS vfs_raw;

-- Create the file_metadata table in the vfs_raw database with a custom location
CREATE TABLE IF NOT EXISTS vfs_raw.file_metadata (
    file_name STRING COMMENT 'Name of the file',
    file_relative_path STRING COMMENT 'Relative path of the file in the repository',
    file_extension STRING COMMENT 'File extension (e.g., md, txt, pdf)',
    category STRING COMMENT 'Category or type of the file (e.g., research_findings)',
    git_last_commit_date TIMESTAMP COMMENT 'Timestamp of the last Git commit for the file',
    git_blob_hash STRING COMMENT 'Git blob hash (unique identifier for the file content)',
    upload_status STRING COMMENT 'Status of the file upload (e.g., pending, needs_reupload, uploaded)',
    upload_on TIMESTAMP COMMENT 'Timestamp when the file was uploaded to Azure',
    blob_url STRING COMMENT 'URL of the file in Azure Blob Storage',
    error_message STRING COMMENT 'Error message if the file upload failed',
    etl_created_at TIMESTAMP COMMENT 'Timestamp when the record was created in the Delta table',
    etl_updated_at TIMESTAMP COMMENT 'Timestamp when the record was last updated in the Delta table'
)
USING delta
LOCATION 'vfs/raw/metadata';


from pyspark.sql import SparkSession
from pyspark.sql.functions import date_format, current_timestamp
from typing import List, Dict

from pyspark.sql import SparkSession
from pyspark.sql.functions import date_format, current_timestamp
from typing import List, Dict

def initial_load_file_metadata(metadata_list: List[Dict]):
    """
    Performs the initial load of file metadata into the vfs_raw.file_metadata table.
    Uses overwrite mode to ensure the table is fresh and doesn't contain duplicates.

    Args:
        metadata_list: List of dictionaries, where each dictionary contains metadata for a file.
                      Each dictionary must have keys: file_name, file_relative_path, file_extension,
                      category, git_last_commit_date, git_blob_hash, upload_status, upload_on, blob_url, error_message.
    """
    spark = SparkSession.builder.appName("InitialLoadFileMetadata").getOrCreate()
    
    # Convert metadata list to DataFrame
    initial_df = spark.createDataFrame(metadata_list)
    
    # Add etl_created_at and etl_updated_at fields with current timestamp in ISO 8601 format
    initial_df = initial_df.withColumn("etl_created_at", date_format(current_timestamp(), "yyyy-MM-dd'T'HH:mm:ss.SSSZ")) \
                           .withColumn("etl_updated_at", date_format(current_timestamp(), "yyyy-MM-dd'T'HH:mm:ss.SSSZ"))
    
    # Insert all records into the Delta table in overwrite mode
    initial_df.write.format("delta") \
        .mode("overwrite") \  # Overwrite the table to ensure it's fresh
        .saveAsTable("vfs_raw.file_metadata")
    
    print("Initial load completed successfully.")
