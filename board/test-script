import pandas as pd

def merge_columns(df, columns_to_merge, result_column_name, separator=" "):
    """
    Create a new column by concatenating values from specified columns.
    
    Parameters:
    -----------
    df : pandas DataFrame
        The input DataFrame
    columns_to_merge : list
        List of column headers to concatenate
    result_column_name : str
        Name for the new concatenated column
    separator : str, optional
        The separator to use between concatenated values, default is a space
    
    Returns:
    --------
    pandas DataFrame
        The modified DataFrame with the new concatenated column
    """
    # Create a copy to avoid modifying the original
    result_df = df.copy()
    
    # Check if all specified columns exist in the DataFrame
    missing_cols = [col for col in columns_to_merge if col not in result_df.columns]
    if missing_cols:
        raise ValueError(f"Columns {missing_cols} not found in DataFrame")
    
    # Function to concatenate non-empty strings with proper spacing
    def concat_row(row):
        # Convert values to string, strip whitespace, and filter out empty strings and NaN values
        values = []
        for col in columns_to_merge:
            if pd.notna(row[col]):  # Skip NaN values
                value = str(row[col]).strip()  # Convert to string and strip whitespace
                if value:  # Skip empty strings
                    values.append(value)
        
        # Join with the separator and ensure no trailing/leading spaces
        return separator.join(values).strip()
    
    # Apply the concatenation function
    result_df[result_column_name] = result_df.apply(concat_row, axis=1)
    
    return result_df


# Merge columns with default separator (space)
result1 = merge_columns(df, ['Code', 'Description'], 'Full_Item')
