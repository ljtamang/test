import subprocess
import os
from datetime import datetime

def get_last_commit_dates(repo_path, files):
    """
    Get the last commit date for each file in a Git repository.

    Args:
        repo_path (str): The path to the Git repository.
        files (list): A list of file paths (relative to the repo_path or absolute).

    Returns:
        dict: A dictionary mapping each file to its last commit date (or None if not found).
    """
    commit_dates = {}

    # Ensure the repository path is absolute
    repo_path = os.path.abspath(repo_path)

    try:
        # Prepare file list as relative paths to the repo
        relative_files = [os.path.relpath(os.path.abspath(file), repo_path) for file in files]
        
        # Run git log for all files at once
        result = subprocess.run(
            ["git", "log", "-1", "--format=%cd"] + relative_files,
            cwd=repo_path,
            text=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            check=True
        )

        # Process git log output
        output_lines = result.stdout.strip().splitlines()
        for file, date_str in zip(files, output_lines):
            try:
                commit_date = datetime.strptime(date_str, "%a %b %d %H:%M:%S %Y %z")
                commit_dates[file] = commit_date
            except ValueError:
                commit_dates[file] = None
    except subprocess.CalledProcessError:
        for file in files:
            commit_dates[file] = None  # If git fails, mark as None
    except Exception as e:
        print(f"Error: {e}")
        for file in files:
            commit_dates[file] = None

    return commit_dates

# Example usage
repo_path = "/path/to/git/repo"
files = ["file1.txt", "/absolute/path/to/file2.py", "relative/path/to/file3.md"]
commit_dates = get_last_commit_dates(repo_path, files)

for file, date in commit_dates.items():
    print(f"File: {file}, Last Commit Date: {date}")
