import subprocess
import os
from datetime import datetime

def get_last_commit_dates_fast(repo_path, files):
    """
    Get the last commit date for each file in a Git repository quickly using batch processing.

    Args:
        repo_path (str): The path to the Git repository.
        files (list): A list of file paths (relative to the repo_path or absolute).

    Returns:
        dict: A dictionary mapping each file to its last commit date (or None if not found).
    """
    commit_dates = {}

    # Ensure the repository path is absolute
    repo_path = os.path.abspath(repo_path)

    # Prepare file list as relative paths to the repo
    relative_files = [os.path.relpath(os.path.abspath(file), repo_path) for file in files]

    try:
        # Run git log with --name-only to get commit details and affected files
        result = subprocess.run(
            ["git", "log", "-1", "--format=%cd %H", "--name-only"] + relative_files,
            cwd=repo_path,
            text=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            check=True
        )

        # Process output to extract commit dates and files
        output_lines = result.stdout.strip().split("\n")
        if not output_lines:
            return {file: None for file in files}  # No logs found for any file

        # Parse each commit block
        commit_date = None
        for line in output_lines:
            if not line.strip():  # Skip empty lines
                continue
            if "%H" in line or line.startswith(" "):  # Date line
                date_str = line.strip().split(" ", 1)[0]
                commit_date = datetime.strptime(date_str, "< formatted styles...mabe Fomat will fit "" Timezoned>
``
