import subprocess
import os
from datetime import datetime

def get_last_commit_dates_fast(repo_path, files):
    """
    Get the last commit date for each file in a Git repository quickly using batch processing.

    Args:
        repo_path (str): The path to the Git repository.
        files (list): A list of file paths (relative to the repo_path or absolute).

    Returns:
        dict: A dictionary mapping each file to its last commit date (or None if not found).
    """
    commit_dates = {}

    # Ensure the repository path is absolute
    repo_path = os.path.abspath(repo_path)

    # Prepare file list as relative paths to the repo
    relative_files = [os.path.relpath(os.path.abspath(file), repo_path) for file in files]

    try:
        # Run git log with --name-only to get commit details and affected files
        result = subprocess.run(
            ["git", "log", "--format=%cd %H", "--name-only"] + relative_files,
            cwd=repo_path,
            text=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            check=True
        )

        # Parse output to extract commit dates and associated files
        output_lines = result.stdout.strip().split("\n")
        current_date = None

        # Map each file to its latest commit date
        for line in output_lines:
            if line.strip() == "":
                # Empty line indicates a new commit block
                current_date = None
            elif current_date is None:
                # Parse the commit date
                try:
                    date_str = " ".join(line.split()[:-1])  # Exclude the commit hash
                    current_date = datetime.strptime(date_str, "%a %b %d %H:%M:%S %Y %z")
                except ValueError:
                    current_date = None
            else:
                # File associated with the current commit
                file_path = os.path.abspath(os.path.join(repo_path, line.strip()))
                if file_path in commit_dates:
                    continue
                commit_dates[file_path] = current_date

        # Fill in files that were not found in the git log
        for file in relative_files:
            abs_file = os.path.abspath(os.path.join(repo_path, file))
            if abs_file not in commit_dates:
                commit_dates[abs_file] = None

    except subprocess.CalledProcessError as e:
        print(f"Git command failed: {e.stderr}")
        for file in files:
            commit_dates[file] = None

    return commit_dates

# Example usage
repo_path = "/path/to/git/repo"
files = ["file1.txt", "/absolute/path/to/file2.py", "relative/path/to/file3.md"]
commit_dates = get_last_commit_dates_fast(repo_path, files)

for file, date in commit_dates.items():
    print(f"File: {file}, Last Commit Date: {date}")
