from typing import List, Dict, Tuple
import os
import json
import subprocess
from datetime import datetime

def get_git_info(file_path: str) -> Tuple[str, str]:
    """
    Get the latest git commit hash and date for a file
    
    Args:
        file_path (str): Path to the file
        
    Returns:
        Tuple[str, str]: (commit_hash, commit_date)
    """
    try:
        # Get the last commit hash
        hash_cmd = ['git', 'log', '-n', '1', '--pretty=format:%H', '--', file_path]
        commit_hash = subprocess.run(hash_cmd, capture_output=True, text=True, check=True).stdout
        
        # Get the last commit date
        date_cmd = ['git', 'log', '-n', '1', '--pretty=format:%cI', '--', file_path]
        commit_date = subprocess.run(date_cmd, capture_output=True, text=True, check=True).stdout
        
        return commit_hash, commit_date
    except subprocess.CalledProcessError:
        # Return placeholder values if git commands fail
        return "no_git_info", datetime.now().isoformat()

def enrich_file_metadata(files: List[Dict[str, str]]) -> List[Dict]:
    """
    Enriches file information with additional metadata including git information.
    
    Args:
        files (List[Dict[str, str]]): List of dictionaries containing file information
            with at least 'file_path' key
            
    Returns:
        List[Dict]: Enhanced list of dictionaries with additional metadata:
            - file_size: Size of file in bytes
            - file_type: File extension
            - commit_hash: Git commit hash of last change
            - commit_date: Date of last git commit
            - is_new: Flag indicating if file is new (True)
            - is_updated: Flag indicating if file was updated (False)
    """
    enriched_files = []
    
    for file_info in files:
        try:
            file_path = file_info['file_path']
            
            # Get file size
            file_size = os.path.getsize(file_path)
            
            # Get file type from extension
            file_type = os.path.splitext(file_path)[1].lstrip('.').lower()
            if not file_type:
                file_type = 'unknown'
            
            # Get git information
            commit_hash, commit_date = get_git_info(file_path)
            
            # Create enriched file info dictionary
            enriched_info = {
                **file_info,  # Include all existing information
                'file_size': file_size,
                'file_type': file_type,
                'commit_hash': commit_hash,
                'commit_date': commit_date,
                'is_new': True,
                'is_updated': False
            }
            
            enriched_files.append(enriched_info)
            
        except Exception as e:
            print(f"Error enriching metadata for {file_info.get('file_path', 'unknown file')}: {str(e)}")
            # Include original file info without enrichment if there's an error
            enriched_files.append(file_info)
    
    return json.dumps(enriched_files, indent=2)
