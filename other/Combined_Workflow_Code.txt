{
    "repository": {
        "repo_name": "va.gov-team",
        "repo_url": "https://github.com/department-of-veterans-affairs/va.gov-team",
        "branch": "main",
        "sparse_checkout_paths": ["products"]
    },
    "processing": {
        "target_file_types": [
            "md",
            "markdown"
        ]
    },
    "storage": {
        "blob_storage_path": "/dbfs/mnt/blob/bronze/raw-data",
        "metadata_file": "/dbfs/mnt/blob/raw/bronze/metadata/metadata.json"
    }
}

------------

import json

def load_json(config_path: str) -> dict:
    """
    Load and parse a JSON configuration file.

    Args:
        config_path (str): Path to the JSON configuration file

    Returns:
        dict: Parsed JSON configuration as a dictionary

    Raises:
        FileNotFoundError: If the configuration file does not exist
        json.JSONDecodeError: If the configuration file is not valid JSON
    """
    with open(config_path, 'r') as f:
        return json.load(f)


-------------

import os
import shutil
import subprocess
from typing import List

def sparse_checkout(
    repo_url: str,
    local_path: str,
    sparse_checkout_paths: List[str],
    branch: str = "main"
) -> bool:
    """
    Perform a sparse checkout of specific folders from a git repository.

    Args:
        repo_url (str): URL of the git repository to clone
        local_path (str): Local path where the repository should be cloned
        sparse_checkout_paths (List[str]): List of paths to include in sparse checkout
        branch (str, optional): Branch to checkout. Defaults to "main"

    Returns:
        bool: True if checkout was successful, False otherwise

    Raises:
        subprocess.SubprocessError: If any git command fails
        OSError: If directory operations fail
    """
    try:
        if os.path.exists(local_path):
            print(f"Repository existed at {local_path} - deleted")
            shutil.rmtree(local_path)
        
        print(f"Starting to clone repository: {repo_url}")
        
        os.makedirs(local_path)
        subprocess.run(['git', 'init'], cwd=local_path, check=True)
        subprocess.run(['git', 'remote', 'add', 'origin', repo_url], cwd=local_path, check=True)
        subprocess.run(['git', 'config', 'core.sparseCheckout', 'true'], cwd=local_path, check=True)
        
        sparse_checkout_path = os.path.join(local_path, '.git', 'info', 'sparse-checkout')
        with open(sparse_checkout_path, 'w') as f:
            for path in sparse_checkout_paths:
                f.write(f"{path}/*\n")
        
        subprocess.run(['git', 'pull', 'origin', branch], cwd=local_path, check=True)
        print(f"Successfully cloned repository {repo_url} ({branch} branch) to {local_path}")
        return True
        
    except Exception as e:
        print(f"Error during sparse checkout: {str(e)}")
        return False



------------

# Databricks notebook source
from file_io_helper import load_json
from git_helper import sparse_checkout

# Load configuration
config = load_json("bronze_config.json")

# Extract parameters
repo_config = config["repository"]
repo_url = repo_config["repo_url"]
local_path = f"/tmp/{repo_config['repo_name']}"
sparse_checkout_paths = repo_config["sparse_checkout_paths"]
branch = repo_config["branch"]

# Perform sparse checkout
success = sparse_checkout(
    repo_url=repo_url,
    local_path=local_path,
    sparse_checkout_paths=sparse_checkout_paths,
    branch=branch
)
