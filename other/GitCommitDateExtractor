from typing import List, Dict, Tuple, Optional
import os
import shutil
from concurrent.futures import ThreadPoolExecutor
import multiprocessing
from pyspark.sql import SparkSession
from datetime import datetime
import subprocess
from pathlib import Path
import tempfile
import time
import math
import tarfile
import io
import base64

class GitCommitDateExtractor:
    def __init__(self, repo_path: str, temp_dir: str = "/tmp/git_repos"):
        """
        Initialize the extractor with repository path and temporary directory for worker copies
        
        Args:
            repo_path: Path to the original git repository
            temp_dir: Base directory for temporary worker copies
        """
        self.repo_path = repo_path
        self.temp_dir = Path(temp_dir)
        self.spark = SparkSession.builder.getOrCreate()
        
        # Ensure temp directory exists on driver
        self.temp_dir.mkdir(parents=True, exist_ok=True)
        
        # Broadcast paths to all workers
        self.broadcast_repo_path = self.spark.sparkContext.broadcast(str(repo_path))
        self.broadcast_temp_dir = self.spark.sparkContext.broadcast(str(temp_dir))

    def _normalize_extensions(self, extensions: List[str]) -> List[str]:
        """
        Normalize file extensions for consistent comparison
        
        Args:
            extensions: List of file extensions (with or without dots)
            
        Returns:
            List of normalized extensions (lowercase, with dots)
        """
        normalized = []
        for ext in extensions:
            # Remove leading dot if present and convert to lowercase
            ext = ext.lower().lstrip('.')
            normalized.append(f'.{ext}')
        return normalized

    def _should_process_file(self, file_path: str, file_types: List[str] = [], exclude_folders: List[str] = []) -> bool:
        """
        Check if a file should be processed based on its type and location
        
        Args:
            file_path: Path to the file
            file_types: List of file extensions to include
            exclude_folders: List of folders to exclude
            
        Returns:
            Boolean indicating whether to process the file
        """
        path = Path(file_path)
        
        # Check excluded folders
        for folder in exclude_folders:
            # Normalize folder path
            folder = folder.strip('/')
            if folder in str(path.parent).split('/'):
                return False
        
        # If no file types specified, process all files
        if not file_types:
            return True
            
        # Check file extension
        return path.suffix.lower() in self._normalize_extensions(file_types)

    def get_all_files(self, file_types: List[str] = [], exclude_folders: List[str] = []) -> List[str]:
        """
        Get list of all files in the repository, filtered by type and excluded folders.
        By default, processes all files in all folders if no filters are specified.
        
        Args:
            file_types: Optional list of file extensions to filter by (e.g., ['md', 'pdf'])
                       If empty, processes all file types
            exclude_folders: Optional list of folders to exclude (e.g., ['.git', 'node_modules'])
                           Paths are relative to repository root
            
        Returns:
            List of relative file paths
        """
        cmd = ["git", "ls-files"]
        output = subprocess.run(
            cmd,
            cwd=self.repo_path,
            capture_output=True,
            text=True,
            check=True
        ).stdout
        
        all_files = output.splitlines()
        
        # Filter files based on type and excluded folders
        return [
            f for f in all_files 
            if self._should_process_file(f, file_types, exclude_folders)
        ]

    # ... (rest of the methods remain the same)


"""
# Example usage, below, different scenario

repo_path = "/dbfs/mnt/your-mount-point/your-repo"
extractor = GitCommitDateExtractor(repo_path)

# Example 1: Process all files in all folders (default behavior)
all_files = extractor.get_all_files()
print(f"Found {len(all_files)} total files in repository")

# Example 2: Process only markdown and PDF files
md_pdf_files = extractor.get_all_files(file_types=['md', 'pdf'])
print(f"Found {len(md_pdf_files)} markdown and PDF files")

# Example 3: Process all files except those in specific folders
filtered_files = extractor.get_all_files(exclude_folders=['.git', 'node_modules', 'test'])
print(f"Found {len(filtered_files)} files (excluding specified folders)")

# Example 4: Process specific file types and exclude certain folders
specific_files = extractor.get_all_files(
    file_types=['md', 'pdf'],
    exclude_folders=['.git', 'node_modules']
)
print(f"Found {len(specific_files)} markdown and PDF files (excluding specified folders)")

# Get commit dates for the filtered files
commit_dates = extractor.get_commit_dates_distributed(specific_files)

# Print results
for file_path, commit_date in commit_dates.items():
    print(f"{file_path}: {commit_date}")

"""
